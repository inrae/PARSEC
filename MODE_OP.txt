**Mode Opératoire pour l'Implémentation de l'Algorithme de Correction dans R**

## 1. Contexte
Ce mode opératoire décrit la mise en place d'un algorithme de correction des effets de lot et de cohorte en R. 
L'objectif est d'harmoniser les données de plusieurs études en l'absence de Quality Controls à long terme.

## 2. Prérequis
- Installation de R et RStudio.
- Installation des bibliothèques `lme4`, `dplyr`, et `tidyverse`.
- Jeu de données au format CSV contenant les colonnes suivantes :
  - `SampleID` : Identifiant de l'échantillon
  - `Batch` : Numéro du lot
  - `Injection_Order` : Ordre d'injection
  - `Ion1, Ion2, ...` : Intensités des différents ions

## 3. Procédure d’exécution dans R

### 3.1. Importation des données
1. Charger le fichier CSV dans R :

```r
# Charger les bibliothèques
library(dplyr)
library(lme4)

# Lire les données
data <- read.csv("data.csv")
```

### 3.2. Exécution du script R
1. Copier le code suivant dans RStudio et l'exécuter :

```r
# Fonction de correction
denoising_correction <- function(data, batch_col, sample_col, intensity_cols) {
  data <- data %>% mutate(across(all_of(intensity_cols), log1p))
  
  for (col in intensity_cols) {
    data <- data %>%
      group_by(!!sym(batch_col)) %>%
      mutate(!!sym(col) := scale(!!sym(col), center = TRUE, scale = TRUE)) %>%
      ungroup()
  }
  
  for (col in intensity_cols) {
    formula <- as.formula(paste(col, "~ Injection_Order + (1|", batch_col, ")"))
    model <- lmer(formula, data = data, REML = TRUE)
    data[[col]] <- residuals(model)
  }
  
  data <- data %>% mutate(across(all_of(intensity_cols), expm1))
  return(data)
}

# Application du traitement
intensity_columns <- names(data)[grepl("Ion", names(data))]
corrected_data <- denoising_correction(data, "Batch", "SampleID", intensity_columns)

# Sauvegarde du fichier corrigé
write.csv(corrected_data, "corrected_data.csv", row.names = FALSE)
```

### 3.3. Exportation des résultats
1. Le fichier `corrected_data.csv` contiendra les valeurs corrigées.
2. Visualiser les résultats via un PCA ou des courbes de densité :

```r
library(ggplot2)
library(FactoMineR)

pca_results <- PCA(corrected_data[ , intensity_columns], scale.unit = TRUE, graph = FALSE)
plot(pca_results, choix = "ind")
```

## 4. Exemple de Jeu de Données
Un exemple fictif de jeu de données à tester :

| SampleID | Batch | Injection_Order | Ion1 | Ion2 |
|----------|-------|----------------|------|------|
| 1        | 1     | 5              | 500  | 300  |
| 2        | 1     | 15             | 520  | 310  |
| 3        | 2     | 25             | 490  | 290  |
| 4        | 2     | 35             | 505  | 295  |


